; Credits from : http://blog.stalkr.net/2014/10/tiny-elf-3264-with-nasm.html
; nasm -f bin -o tiny64 tiny64.asm
; need to convert to hex
BITS 64
  org 0x400000

; 64-bit ELF header
ehdr:
        ;  1), 0 (ABI ver.)
        db 0x7F, "ELF", 2, 1, 1, 0       ; e_ident
        times 8 db 0                     ; reserved (zeroes)

        dw 2              ; e_type:     Executable file
        dw 0x3e           ; e_machine:  AMD64
        dd 1              ; e_version:  current version
        dq _start         ; e_entry:    program entry address (0x78)
        dq phdr - $$      ; e_phoff     program header offset (0x40)
        dq 0              ; e_shoff     no section headers
        dd 0              ; e_flags     no flags
        dw ehdrsize       ; e_ehsize:   ELF header size (0x40)
        dw phdrsize       ; e_phentsize:        program header size (0x38)
        dw 1              ; e_phnum:    one program header
        dw 0              ; e_shentsize
        dw 0              ; e_shnum
        dw 0              ; e_shstrndx

ehdrsize equ $ - ehdr

; 64-bit ELF program header
phdr:
        dd 1              ; p_type:     loadable segment
        dd 5              ; p_flags     read and execute
        dq 0              ; p_offset
        dq $$             ; p_vaddr:    start of the current section
        dq $$             ; p_paddr:    "               "
        dq filesize       ; p_filesz
        dq filesize       ; p_memsz
        dq 0x200000       ; p_align:    2^11=200000 = section alignment

; program header size
phdrsize equ $ - phdr

_start:
        call    gethex
        sal     $4, rax
        push    rax
        call    gethex
        add     rax,(rsp)
        call    putchar
        pop     rax
        jmp     _start

putchar:
        xor     rbx, rbx
        inc     rbx
        lea     [rsp+4], rcx
        mov     rbx, rdx
        mov     $4, rax
        syscall
        ret

gethex:
        call    getchar
        cmp     $35, rax
        jne     .convhex

.loop:
        call    getchar
        cmp     $10, rax
        jne     .loop
        jmp     gethex

.convhex:
        sub     $48, rax
        jl      gethex
        cmp     $48, rax
        jl      .ret
        sub     $39, rax
        ret

getchar:
        push    $0
        xor     rbx, rbx
        mov     rsp, rcx
        mov     rbx, rdx
        inc     rdx
        mov     $3, rax
        syscall
        test    rax, rax
        je      exit
        pop     rax
        ret

exit:
        xor     rax, rax
        mov     rax, rbx
        inc     rax
        syscall

filesize  equ  $ - $$
